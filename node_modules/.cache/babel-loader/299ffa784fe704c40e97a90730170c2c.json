{"ast":null,"code":"import { ADD_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, REDUCE_QUANTITY, ADD_QUANTITY } from '../actions/action-types/cart-actions';\nconst initState = {\n  cart: []\n};\n\nconst cartReducer = (state = initState, action) => {\n  let cart = state.cart;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      let existing_item = cart.find(item => item.product.id === action.payload.productId);\n\n      if (existing_item) {\n        existing_item.quantity += 1;\n      }\n\n      cart.push(action.payload);\n      return { ...state,\n        cart: cart\n      };\n\n    case GET_CART_QUANTITY_BY_ID:\n      let targetItem = cart.find(item => item.product.id === action.payload.itemId);\n      return targetItem.quantity;\n\n    case REMOVE_FROM_CART:\n      return { ...state,\n        cart: cart.filter(item => item.product.id !== action.payload.productId)\n      };\n\n    case ADD_QUANTITY:\n      let itm = cart.find(item => item.product.id === action.payload.productId);\n      let newCrt = cart.filter(item => item.product.id !== action.payload.productId);\n      itm.quantity += 1;\n      newCrt.push(itm);\n      return { ...state,\n        cart: newCrt\n      };\n\n    case REDUCE_QUANTITY:\n      let itemm = cart.find(item => item.product.id === action.payload.productId);\n      let newCartt = cart.filter(item => item.product.id !== action.payload.productId);\n\n      if (itemm.quantity === 1) {\n        return { ...state,\n          cart: newCartt\n        };\n      }\n\n      itemm.quantity -= 1;\n      newCartt.push(itemm);\n      return { ...state,\n        cart: newCartt\n      };\n\n    case UPDATE_CART_QUANTITY:\n      let item = cart.find(item => item.product.id === action.payload.productId);\n      let newcart = cart.filter(item => item.product.id !== action.payload.productId);\n      item.quantity = action.payload.quantity;\n      newcart.push(item);\n      return { ...state,\n        cart: newcart\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/godfrey/Documents/MYPROJECTS/JAVASCRIPT/FULLSTACK/pizza-app-react-client/src/components/store/reducers/cartReducer.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","REDUCE_QUANTITY","ADD_QUANTITY","initState","cart","cartReducer","state","action","type","existing_item","find","item","product","id","payload","productId","quantity","push","GET_CART_QUANTITY_BY_ID","targetItem","itemId","filter","itm","newCrt","itemm","newCartt","newcart"],"mappings":"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","sourcesContent":["import {\r\n    ADD_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    REDUCE_QUANTITY,\r\n    ADD_QUANTITY,\r\n    \r\n} from '../actions/action-types/cart-actions'\r\n\r\nconst initState = {\r\n    cart: []\r\n}\r\n\r\nconst cartReducer= (state = initState,action)=>{\r\n    let cart = state.cart\r\n   switch(action.type){\r\n       case ADD_TO_CART:\r\n           let existing_item = cart.find(item => item.product.id === action.payload.productId)\r\n           if(existing_item){\r\n               existing_item.quantity +=1\r\n           }\r\n           cart.push(action.payload)\r\n           return {\r\n               ...state,\r\n               cart: cart\r\n           }\r\n           case GET_CART_QUANTITY_BY_ID : \r\n           let targetItem = cart.find(item => item.product.id === action.payload.itemId);\r\n           return targetItem.quantity;\r\n           \r\n\r\n        case REMOVE_FROM_CART:        \r\n           return {\r\n               ...state,\r\n               cart: cart.filter(item => item.product.id !== action.payload.productId)\r\n           }\r\n       case ADD_QUANTITY:\r\n           let itm = cart.find(item => item.product.id === action.payload.productId)\r\n           let newCrt = cart.filter(item => item.product.id !== action.payload.productId)\r\n           itm.quantity += 1\r\n           newCrt.push(itm)\r\n           return {\r\n               ...state,\r\n               cart: newCrt\r\n\r\n           }   \r\n        case REDUCE_QUANTITY:\r\n            let itemm = cart.find(item=>item.product.id === action.payload.productId)\r\n            let newCartt = cart.filter(item=>item.product.id !== action.payload.productId)\r\n            if(itemm.quantity === 1){\r\n                return {\r\n                    ...state,\r\n                    cart: newCartt\r\n                }\r\n            }\r\n            itemm.quantity -=1           \r\n            newCartt.push(itemm)           \r\n            return {\r\n                ...state,\r\n                cart: newCartt\r\n                \r\n            }\r\n        case UPDATE_CART_QUANTITY:\r\n            let item = cart.find(item=>item.product.id === action.payload.productId)\r\n            let newcart = cart.filter(item=>item.product.id !== action.payload.productId)\r\n            item.quantity = action.payload.quantity;\r\n            newcart.push(item)\r\n            return {\r\n                ...state,\r\n                cart: newcart\r\n            }\r\n\r\n        default:\r\n            return state\r\n           \r\n   }\r\n    \r\n   \r\n    \r\n}\r\n\r\nexport default cartReducer\r\n"]},"metadata":{},"sourceType":"module"}